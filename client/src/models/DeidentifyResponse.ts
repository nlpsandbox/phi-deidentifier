/* tslint:disable */
/* eslint-disable */
/**
 * NLP Sandbox Deidentifier API
 * The OpenAPI specification implemented by NLP Sandbox PHI Deidentifiers. # Overview TBA 
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: thomas.schaffter@sagebionetworks.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Annotation,
    AnnotationFromJSON,
    AnnotationFromJSONTyped,
    AnnotationToJSON,
    Note,
    NoteFromJSON,
    NoteFromJSONTyped,
    NoteToJSON,
} from './';

/**
 * Response to deidentification request
 * @export
 * @interface DeidentifyResponse
 */
export interface DeidentifyResponse {
    /**
     * 
     * @type {Annotation}
     * @memberof DeidentifyResponse
     */
    originalAnnotations?: Annotation;
    /**
     * 
     * @type {Annotation}
     * @memberof DeidentifyResponse
     */
    deidentifiedAnnotations?: Annotation;
    /**
     * 
     * @type {Note}
     * @memberof DeidentifyResponse
     */
    deidentifiedNote?: Note;
}

export function DeidentifyResponseFromJSON(json: any): DeidentifyResponse {
    return DeidentifyResponseFromJSONTyped(json, false);
}

export function DeidentifyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeidentifyResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'originalAnnotations': !exists(json, 'originalAnnotations') ? undefined : AnnotationFromJSON(json['originalAnnotations']),
        'deidentifiedAnnotations': !exists(json, 'deidentifiedAnnotations') ? undefined : AnnotationFromJSON(json['deidentifiedAnnotations']),
        'deidentifiedNote': !exists(json, 'deidentifiedNote') ? undefined : NoteFromJSON(json['deidentifiedNote']),
    };
}

export function DeidentifyResponseToJSON(value?: DeidentifyResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'originalAnnotations': AnnotationToJSON(value.originalAnnotations),
        'deidentifiedAnnotations': AnnotationToJSON(value.deidentifiedAnnotations),
        'deidentifiedNote': NoteToJSON(value.deidentifiedNote),
    };
}


